/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ActionEvent } from "./ActionEvent";
import { ActionEventCountArgs } from "./ActionEventCountArgs";
import { ActionEventFindManyArgs } from "./ActionEventFindManyArgs";
import { ActionEventFindUniqueArgs } from "./ActionEventFindUniqueArgs";
import { CreateActionEventArgs } from "./CreateActionEventArgs";
import { UpdateActionEventArgs } from "./UpdateActionEventArgs";
import { DeleteActionEventArgs } from "./DeleteActionEventArgs";
import { Collection } from "../../collection/base/Collection";
import { Document } from "../../document/base/Document";
import { ActionEventService } from "../actionEvent.service";
@graphql.Resolver(() => ActionEvent)
export class ActionEventResolverBase {
  constructor(protected readonly service: ActionEventService) {}

  async _actionEventsMeta(
    @graphql.Args() args: ActionEventCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ActionEvent])
  async actionEvents(
    @graphql.Args() args: ActionEventFindManyArgs
  ): Promise<ActionEvent[]> {
    return this.service.actionEvents(args);
  }

  @graphql.Query(() => ActionEvent, { nullable: true })
  async actionEvent(
    @graphql.Args() args: ActionEventFindUniqueArgs
  ): Promise<ActionEvent | null> {
    const result = await this.service.actionEvent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ActionEvent)
  async createActionEvent(
    @graphql.Args() args: CreateActionEventArgs
  ): Promise<ActionEvent> {
    return await this.service.createActionEvent({
      ...args,
      data: {
        ...args.data,

        collectionId: args.data.collectionId
          ? {
              connect: args.data.collectionId,
            }
          : undefined,

        documentId: args.data.documentId
          ? {
              connect: args.data.documentId,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ActionEvent)
  async updateActionEvent(
    @graphql.Args() args: UpdateActionEventArgs
  ): Promise<ActionEvent | null> {
    try {
      return await this.service.updateActionEvent({
        ...args,
        data: {
          ...args.data,

          collectionId: args.data.collectionId
            ? {
                connect: args.data.collectionId,
              }
            : undefined,

          documentId: args.data.documentId
            ? {
                connect: args.data.documentId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ActionEvent)
  async deleteActionEvent(
    @graphql.Args() args: DeleteActionEventArgs
  ): Promise<ActionEvent | null> {
    try {
      return await this.service.deleteActionEvent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Collection, {
    nullable: true,
    name: "collectionId",
  })
  async getCollectionId(
    @graphql.Parent() parent: ActionEvent
  ): Promise<Collection | null> {
    const result = await this.service.getCollectionId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Document, {
    nullable: true,
    name: "documentId",
  })
  async getDocumentId(
    @graphql.Parent() parent: ActionEvent
  ): Promise<Document | null> {
    const result = await this.service.getDocumentId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
