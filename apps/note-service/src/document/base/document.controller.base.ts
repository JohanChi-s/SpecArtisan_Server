/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DocumentService } from "../document.service";
import { DocumentCreateInput } from "./DocumentCreateInput";
import { Document } from "./Document";
import { DocumentFindManyArgs } from "./DocumentFindManyArgs";
import { DocumentWhereUniqueInput } from "./DocumentWhereUniqueInput";
import { DocumentUpdateInput } from "./DocumentUpdateInput";
import { ActionEventFindManyArgs } from "../../actionEvent/base/ActionEventFindManyArgs";
import { ActionEvent } from "../../actionEvent/base/ActionEvent";
import { ActionEventWhereUniqueInput } from "../../actionEvent/base/ActionEventWhereUniqueInput";
import { ArchivedFindManyArgs } from "../../archived/base/ArchivedFindManyArgs";
import { Archived } from "../../archived/base/Archived";
import { ArchivedWhereUniqueInput } from "../../archived/base/ArchivedWhereUniqueInput";
import { CommentFindManyArgs } from "../../comment/base/CommentFindManyArgs";
import { Comment } from "../../comment/base/Comment";
import { CommentWhereUniqueInput } from "../../comment/base/CommentWhereUniqueInput";
import { MemberFindManyArgs } from "../../member/base/MemberFindManyArgs";
import { Member } from "../../member/base/Member";
import { MemberWhereUniqueInput } from "../../member/base/MemberWhereUniqueInput";

export class DocumentControllerBase {
  constructor(protected readonly service: DocumentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Document })
  async createDocument(
    @common.Body() data: DocumentCreateInput
  ): Promise<Document> {
    return await this.service.createDocument({
      data: data,
      select: {
        authorId: true,
        collectionId: true,
        createdAt: true,
        emoji: true,
        id: true,
        isFullWidth: true,
        isPublic: true,
        publishedAt: true,
        revision: true,
        templateId: true,
        text: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Document] })
  @ApiNestedQuery(DocumentFindManyArgs)
  async documents(@common.Req() request: Request): Promise<Document[]> {
    const args = plainToClass(DocumentFindManyArgs, request.query);
    return this.service.documents({
      ...args,
      select: {
        authorId: true,
        collectionId: true,
        createdAt: true,
        emoji: true,
        id: true,
        isFullWidth: true,
        isPublic: true,
        publishedAt: true,
        revision: true,
        templateId: true,
        text: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Document })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async document(
    @common.Param() params: DocumentWhereUniqueInput
  ): Promise<Document | null> {
    const result = await this.service.document({
      where: params,
      select: {
        authorId: true,
        collectionId: true,
        createdAt: true,
        emoji: true,
        id: true,
        isFullWidth: true,
        isPublic: true,
        publishedAt: true,
        revision: true,
        templateId: true,
        text: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Document })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDocument(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() data: DocumentUpdateInput
  ): Promise<Document | null> {
    try {
      return await this.service.updateDocument({
        where: params,
        data: data,
        select: {
          authorId: true,
          collectionId: true,
          createdAt: true,
          emoji: true,
          id: true,
          isFullWidth: true,
          isPublic: true,
          publishedAt: true,
          revision: true,
          templateId: true,
          text: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Document })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDocument(
    @common.Param() params: DocumentWhereUniqueInput
  ): Promise<Document | null> {
    try {
      return await this.service.deleteDocument({
        where: params,
        select: {
          authorId: true,
          collectionId: true,
          createdAt: true,
          emoji: true,
          id: true,
          isFullWidth: true,
          isPublic: true,
          publishedAt: true,
          revision: true,
          templateId: true,
          text: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/actionEvents")
  @ApiNestedQuery(ActionEventFindManyArgs)
  async findActionEvents(
    @common.Req() request: Request,
    @common.Param() params: DocumentWhereUniqueInput
  ): Promise<ActionEvent[]> {
    const query = plainToClass(ActionEventFindManyArgs, request.query);
    const results = await this.service.findActionEvents(params.id, {
      ...query,
      select: {
        action: true,
        actor: true,
        assignee: true,
        assigner: true,

        collectionId: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        documentId: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/actionEvents")
  async connectActionEvents(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: ActionEventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      actionEvents: {
        connect: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/actionEvents")
  async updateActionEvents(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: ActionEventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      actionEvents: {
        set: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/actionEvents")
  async disconnectActionEvents(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: ActionEventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      actionEvents: {
        disconnect: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/archiveds")
  @ApiNestedQuery(ArchivedFindManyArgs)
  async findArchiveds(
    @common.Req() request: Request,
    @common.Param() params: DocumentWhereUniqueInput
  ): Promise<Archived[]> {
    const query = plainToClass(ArchivedFindManyArgs, request.query);
    const results = await this.service.findArchiveds(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/archiveds")
  async connectArchiveds(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: ArchivedWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      archiveds: {
        connect: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/archiveds")
  async updateArchiveds(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: ArchivedWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      archiveds: {
        set: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/archiveds")
  async disconnectArchiveds(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: ArchivedWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      archiveds: {
        disconnect: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/childDocuments")
  @ApiNestedQuery(DocumentFindManyArgs)
  async findChildDocuments(
    @common.Req() request: Request,
    @common.Param() params: DocumentWhereUniqueInput
  ): Promise<Document[]> {
    const query = plainToClass(DocumentFindManyArgs, request.query);
    const results = await this.service.findChildDocuments(params.id, {
      ...query,
      select: {
        authorId: true,
        collectionId: true,
        createdAt: true,
        emoji: true,
        id: true,
        isFullWidth: true,
        isPublic: true,
        publishedAt: true,
        revision: true,
        templateId: true,
        text: true,
        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/childDocuments")
  async connectChildDocuments(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      childDocuments: {
        connect: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/childDocuments")
  async updateChildDocuments(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      childDocuments: {
        set: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/childDocuments")
  async disconnectChildDocuments(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      childDocuments: {
        disconnect: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/comments")
  @ApiNestedQuery(CommentFindManyArgs)
  async findComments(
    @common.Req() request: Request,
    @common.Param() params: DocumentWhereUniqueInput
  ): Promise<Comment[]> {
    const query = plainToClass(CommentFindManyArgs, request.query);
    const results = await this.service.findComments(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,

        document: {
          select: {
            id: true,
          },
        },

        id: true,

        parentCommentId: {
          select: {
            id: true,
          },
        },

        position: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/comments")
  async connectComments(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: CommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comments: {
        connect: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/comments")
  async updateComments(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: CommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comments: {
        set: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/comments")
  async disconnectComments(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: CommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comments: {
        disconnect: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/documents")
  @ApiNestedQuery(DocumentFindManyArgs)
  async findDocuments(
    @common.Req() request: Request,
    @common.Param() params: DocumentWhereUniqueInput
  ): Promise<Document[]> {
    const query = plainToClass(DocumentFindManyArgs, request.query);
    const results = await this.service.findDocuments(params.id, {
      ...query,
      select: {
        authorId: true,
        collectionId: true,
        createdAt: true,
        emoji: true,
        id: true,
        isFullWidth: true,
        isPublic: true,
        publishedAt: true,
        revision: true,
        templateId: true,
        text: true,
        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/documents")
  async connectDocuments(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documents: {
        connect: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/documents")
  async updateDocuments(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documents: {
        set: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/documents")
  async disconnectDocuments(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documents: {
        disconnect: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/members")
  @ApiNestedQuery(MemberFindManyArgs)
  async findMembers(
    @common.Req() request: Request,
    @common.Param() params: DocumentWhereUniqueInput
  ): Promise<Member[]> {
    const query = plainToClass(MemberFindManyArgs, request.query);
    const results = await this.service.findMembers(params.id, {
      ...query,
      select: {
        collection: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        role: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/members")
  async connectMembers(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: MemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      members: {
        connect: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/members")
  async updateMembers(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: MemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      members: {
        set: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/members")
  async disconnectMembers(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: MemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      members: {
        disconnect: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }
}
