/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Archived } from "./Archived";
import { ArchivedCountArgs } from "./ArchivedCountArgs";
import { ArchivedFindManyArgs } from "./ArchivedFindManyArgs";
import { ArchivedFindUniqueArgs } from "./ArchivedFindUniqueArgs";
import { CreateArchivedArgs } from "./CreateArchivedArgs";
import { UpdateArchivedArgs } from "./UpdateArchivedArgs";
import { DeleteArchivedArgs } from "./DeleteArchivedArgs";
import { CollectionFindManyArgs } from "../../collection/base/CollectionFindManyArgs";
import { Collection } from "../../collection/base/Collection";
import { DocumentFindManyArgs } from "../../document/base/DocumentFindManyArgs";
import { Document } from "../../document/base/Document";
import { ArchivedService } from "../archived.service";
@graphql.Resolver(() => Archived)
export class ArchivedResolverBase {
  constructor(protected readonly service: ArchivedService) {}

  async _archivedsMeta(
    @graphql.Args() args: ArchivedCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Archived])
  async archiveds(
    @graphql.Args() args: ArchivedFindManyArgs
  ): Promise<Archived[]> {
    return this.service.archiveds(args);
  }

  @graphql.Query(() => Archived, { nullable: true })
  async archived(
    @graphql.Args() args: ArchivedFindUniqueArgs
  ): Promise<Archived | null> {
    const result = await this.service.archived(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Archived)
  async createArchived(
    @graphql.Args() args: CreateArchivedArgs
  ): Promise<Archived> {
    return await this.service.createArchived({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Archived)
  async updateArchived(
    @graphql.Args() args: UpdateArchivedArgs
  ): Promise<Archived | null> {
    try {
      return await this.service.updateArchived({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Archived)
  async deleteArchived(
    @graphql.Args() args: DeleteArchivedArgs
  ): Promise<Archived | null> {
    try {
      return await this.service.deleteArchived(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Collection], { name: "collections" })
  async findCollections(
    @graphql.Parent() parent: Archived,
    @graphql.Args() args: CollectionFindManyArgs
  ): Promise<Collection[]> {
    const results = await this.service.findCollections(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Document], { name: "documents" })
  async findDocuments(
    @graphql.Parent() parent: Archived,
    @graphql.Args() args: DocumentFindManyArgs
  ): Promise<Document[]> {
    const results = await this.service.findDocuments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
